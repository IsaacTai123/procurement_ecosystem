@startuml
skinparam linetype ortho
skinparam classAttributeIconSize 0

' ================= Layer 0: Ecosystem =================

class Ecosystem {
    - networks : List<Network>
    - user : Role
}

class Network {
    - name : String
    - enterpriseDir : EnterpriseDirectory
    - orgDir : OrganizationDirectory
    - shipmentDirectories : ShipmentDirectory
    - globalUserAccountDir : GlobalUserAccountDirectory
    - globalOrgDir : GlobalOrganizationDirectory
    - userRegistry : UserRegistry
    - orgRegistry : OrganizationRegistry
    - userAccountService : UserAccountService
    - orgService : OrganizationService
}

Ecosystem "1" --> "*" Network : manages

' ================= Layer 1: Enterprise & Org =================

class Enterprise {
    - purchaseRequests : List<PurchaseRequest>
    - shipments : List<Shipment>
    - enterpriseId : String
    - name : String
    - nationality : String
    - type : EnterpriseType
    - organizations : List<Organization>
    + addPurchaseRequest(pr : PurchaseRequest) : void
    + getShipmentsByVendor(vendorId : String) : List<Shipment>
    + getAllUserAccounts() : List<UserAccount>
}

class Organization {
    - name : String
    - userAccounts : List<UserAccount>
}

Network "1" --> "*" Enterprise : contains
Enterprise "1" --> "*" Organization : contains
Organization "1" --> "*" UserAccount : manages

' ================= Layer 2: Users =================

class UserAccount {
    - username : String
    - password : String
    - role : Role
}

enum Role {
    ADMIN
    IT_ADMIN
    PROCUREMENT_SPECIALIST
    IT_ENGINEER
    FINANCE_ANALYST
    LEGAL_REVIEWER
    WAREHOUSE_SPECIALIST
    SALES_MANAGER
    SHIPPING_COORDINATOR
}

UserAccount --> Role

' ================= Layer 3: WorkRequest Superclass =================

abstract class WorkRequest {
    # id : String
    # sender : UserAccount
    # receiver : UserAccount
    # requestDate : Date
    # status : RequestStatus
    # workflowSteps : List<WorkflowStep>
    {abstract} # initWorkflowSteps(): void
    + getCurrentStep() : WorkflowStep
}

enum RequestStatus {
    PENDING
    RECEIVED
    APPROVED
    ACCEPTED
    REJECTED
    COMPLETED
}

class WorkflowStep {
    - organization : OrganizationType
    - assignedTo : UserAccount
    - stepStatus : ApprovalStatus
    - active : boolean
    - actionTime : LocalDate
    - remarks : String
}

enum ApprovalStatus {
    PENDING
    SUBMITTED
    APPROVED
    REJECTED
    SKIPPED
}

WorkflowStep --> ApprovalStatus

WorkRequest --> RequestStatus
WorkRequest --> WorkflowStep

WorkRequest <|-- PurchaseRequest
WorkRequest <|-- SubmitQuotation
WorkRequest <|-- PurchaseOrder
WorkRequest <|-- ContractReviewRequest
WorkRequest <|-- DeliveryRequest

' ================= Layer 4: WorkRequest Subclasses =================

class PurchaseRequest {
    - reason : String
    - purchaseItems : List<PurchaseItem>
    - rfqId : String
}

class SubmitQuotation {
    - rfqId : String
    - vendor : Enterprise
    - purchaseItems : List<PurchaseItem>
    - paymentTerms : String
    - remarks : String
    + getTotalAmount() : double
}

class PurchaseOrder {
    - id : String
    - quotationId : String
    - vendor : Enterprise
    - purchaseItems : List<PurchaseItem>
    - shippingAddress : String
    - totalAmount : double
    - remarks : String
}

class ContractReviewRequest {
    - quotationId : String
    - contract : Contract
    - remarks : String
}

class DeliveryRequest {
    - products : List<PurchaseItem>
    - logisticsPartner : Enterprise
    - shipment : Shipment
}

class ProcurementClosure {
    - id : String
    - prId : String
    - deliveryReceiptId : String
    - closureDate : LocalDate
    - closedBy : UserAccount
    - remarks : String
}

' ================= Layer 5: Supporting Domain Models =================

class RFQ {
    - id : String
    - linkedPRId : String
    - vendors : Enterprise
    - quotations : List<SubmitQuotation>
    - purchaseItems : List<PurchaseItem>
    - deadline : LocalDate
    - status : RFQStatus
    - remarks : String
}

enum RFQStatus {
    DRAFT
    SENT
    RECEIVED
    EXPIRED
    CLOSED
}

RFQ --> RFQStatus

class Contract {
    - contractId : String
    - quotationId : String
    - vendor : Enterprise
    - purchaseItems : List<PurchaseItem>
    - terms : String
    - effectiveDate : LocalDate
    - expirationDate : LocalDate
    - status : ContractStatus
    - signed : boolean
}

enum ContractStatus {
    DRAFT
    UNDER_REVIEW
    APPROVED
    ACTIVE
    TERMINATED
}

Contract --> ContractStatus

class Shipment {
    - trackingNumber : String
    - products : PurchaseItem
    - quantity : int
    - shipDate : Date
    - expectedArrival : Date
    - status : ShipmentStatus
}

enum ShipmentStatus {
    PLACED
    IN_TRANSIT
    DELIVERED
}

Shipment --> ShipmentStatus

class DeliveryReceipt {
    - confirmedBy : UserAccount
    - reviewedBy : UserAccount
    - receivedDate : Date
    - shipmentId : String
    - status : ReceiptStatus
    - conditionNotes : String
}

enum ReceiptStatus {
    PENDING_REVIEW
    COMPLETED
}

DeliveryReceipt --> ReceiptStatus

class Spec {
    - modelNumber : String
    - color : String
    - size : String
    - material : String
    - category : String
    - remarks : String
}

class Product {
    - id : String
    - name : String
}

class PurchaseItem {
    - product : Product
    - spec : Spec
    - quantity : int
    - unitPrice : double
}

PurchaseRequest --> PurchaseItem
PurchaseItem --> Product
PurchaseItem --> Spec

' ================= Relationships (Flow) =================

RFQ --> PurchaseRequest : refers to
RFQ --> Enterprise : invites

SubmitQuotation --> RFQ : responds to

ContractReviewRequest --> SubmitQuotation : reviews
ContractReviewRequest --> Contract : creates

PurchaseOrder --> SubmitQuotation : derived from
Contract --> Enterprise : with
Contract --> SubmitQuotation : based on

DeliveryRequest --> Enterprise : via logistics
DeliveryRequest --> Shipment : dispatches

ProcurementClosure --> PurchaseRequest : closes
ProcurementClosure --> DeliveryReceipt : confirms
@enduml
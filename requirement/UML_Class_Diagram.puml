@startuml
skinparam linetype ortho
skinparam classAttributeIconSize 0

' ================= Layer 0: Ecosystem =================

class Ecosystem {
    - networkList : List<Network>
    - sysAdmin : UserAccount
}

class Network {
    - name : String
    - enterpriseDir : EnterpriseDirectory
    - orgDir : OrganizationDirectory
    - shipmentDirectories : ShipmentDirectory
    - globalUserAccountDir : GlobalUserAccountDirectory
    - globalOrgDir : GlobalOrganizationDirectory
    - userRegistry : UserRegistry
    - orgRegistry : OrganizationRegistry
    - userAccountService : UserAccountService
    - orgService : OrganizationService
}

Ecosystem "1" --> "*" Network : manages

' ================= Layer 1: Enterprise & Org =================

class Enterprise {
    - name : String
    - type : EnterpriseType
    - organizationList : OrganizationDirectory
    - purchaseRequestList : PurchaseRequestDirectory
    - purchaseOrderList : PurchaseOrderDirectory

    + findUserByOrgRoleAndEnt(OrganizationType orgType, Role role)
}

class Organization {
    - name : String
    - enterprise : Enterprise
    - userAccounts : List<UserAccount>
}

Network "1" --> "*" Enterprise : contains
Enterprise "1" --> "*" Organization : contains
Organization "1" --> "*" UserAccount : manages

' ================= Layer 2: Users =================

class UserAccount {
    - userId : String
    - username : String
    - email : String
    - userType : Role
    - password : String
    - org : Organization
    - enterprise : Enterprise
}

enum Role {
    SYS_ADMIN,
    IT_ADMIN
    ENGINEER
    ANALYST
    SPECIALIST
    LEGAL_REVIEWER
    MANAGER
    SHIPPING_COORDINATOR
}

UserAccount --> Role

' ================= Layer 3: WorkRequest Superclass =================

abstract class WorkRequest {
    # id : String
    # sender : UserAccount
    # receiver : UserAccount
    # requestDate : Date
    # status : RequestStatus
    # workflowSteps : List<WorkflowStep>

    {abstract} # initWorkflowSteps(): void
    + markAsCompleted() : void
    + markAsRejected() : void
    + markAsApproved() : void
    + markAsReceived() : void
    + getCurrentActiveStep() : WorkflowStep
    + getNextPendingStep() : WorkflowStep
    + getPendingStep() : WorkflowStep
    + createRequesterStep(UserAccount user) : void
    + advanceToNextStep(...) : Result<Void>
    + rejectCurrentStepAndTerminate(UserAccount user) : Result<Void>
    + forceCompleteCurrentStep(ApprovalStatus status) : Result<Void>
    + forwardToNextStep(...) : Result<Void>
    + isCompleted() : boolean
}

enum RequestStatus {
    PENDING
    RECEIVED
    APPROVED
    ACCEPTED
    REJECTED
    COMPLETED
}

class WorkflowStep {
    - orgType : OrganizationType
    - requiredRole : Role
    - assignedUser : UserAccount
    - stepType : StepType
    - status : ApprovalStatus
    - active : boolean
    - actionTime : LocalDate
    - remarks : String

    + markAsApproved() : void
    + markAsRejected() : void
    + markAsSkipped() : void
    + markAsSubmitted() : void
    + resolveAssignedUser(allUsersDir: GlobalUserAccountDirectory,
                             entType: EnterpriseType): void
}

enum ApprovalStatus {
    PENDING
    SUBMITTED
    APPROVED
    REJECTED
    SKIPPED
}

WorkflowStep --> ApprovalStatus

WorkRequest --> RequestStatus
WorkRequest --> WorkflowStep

WorkRequest <|-- PurchaseRequest
WorkRequest <|-- SubmitQuotation
WorkRequest <|-- ContractReviewRequest
WorkRequest <|-- DeliveryRequest

' ================= Layer 4: WorkRequest Subclasses =================

class PurchaseRequest {
    - reason : String
    - purchaseItems : PurchaseItemDirectory
    - linkedRFQIds : List<String>
    # initWorkflowSteps() : void
    + addLinkedRFQId(rfqId : String) : void
    + addPurchaseItem(Product item, int quantity,
    double unitPrice, Spec spec) : void
}

class SubmitQuotation {
    - linkedRFQId : String
    - vendor : Enterprise
    - price : double
    - paymentTerms : String
    - remarks : String
    + initWorkflowSteps() : void
}

class PurchaseOrder {
    - id : String
    - quotationId : String
    - linkedPRId : String
    - buyerAccount : UserAccount
    - vendorAccount : UserAccount
    - logistics : Enterprise
    - purchaseItems : List<PurchaseItem>
    - shippingAddress : String
    - totalAmount : double
    - remarks : String
    - purchasedDate : String
    - purchaseTime : String
    - isIssued : boolean
    - isDelivered : boolean
    - shipment : Shipment
    - deliveryRequest : DeliveryRequest
}

class ContractReviewRequest {
    - quotationId : String
    - contract : Contract
    - remarks : String
}

class DeliveryRequest {
    - products : List<PurchaseItem>
    - logisticsPartner : Enterprise
'    - shipment : Shipment
}

class ProcurementClosure {
    - id : String
    - prId : String
    - deliveryReceiptId : String
    - closureDate : LocalDate
    - closedBy : UserAccount
    - remarks : String
}

' ================= Layer 5: Supporting Domain Models =================

class RFQ {
    - id : String
    - linkedPRId : String
    - vendors : Enterprise
    - quotations : QuotationDirectory
    - purchaseItems : List<PurchaseItem>
    - deadline : LocalDate
    - status : RFQStatus
    - remarks : String
    + markAsSent() : void
    + markAsReceived() : void
    + markAsClosed() : void
}

enum RFQStatus {
    DRAFT
    SENT
    RECEIVED
    EXPIRED
    CLOSED
}

RFQ --> RFQStatus

class Contract {
    - contractId : String
    - quotationId : String
    - vendor : Enterprise
    - purchaseItems : List<PurchaseItem>
    - terms : String
    - effectiveDate : LocalDate
    - expirationDate : LocalDate
    - status : ContractStatus
    - signed : boolean
}

enum ContractStatus {
    DRAFT
    UNDER_REVIEW
    APPROVED
    ACTIVE
    TERMINATED
}

Contract --> ContractStatus

class Shipment {
    - trackingNumber : String
    - products : List<PurchaseItem>
    - quantity : int
    - shipDate : Date
    - expectedArrival : Date
    - status : ShipmentStatus
    - purchaseOrderId : String
    - deliveryReq : DeliveryRequest
    - sender : UserAccount
    - receiver : UserAccount
}

enum ShipmentStatus {
    PLACED
    IN_TRANSIT
    DELIVERED
}

Shipment --> ShipmentStatus

class DeliveryReceipt {
    - confirmedBy : UserAccount
    - reviewedBy : UserAccount
    - receivedDate : Date
    - shipmentId : String
    - status : ReceiptStatus
    - conditionNotes : String
}

enum ReceiptStatus {
    PENDING_REVIEW
    COMPLETED
}

DeliveryReceipt --> ReceiptStatus

class Spec {
    - modelNumber : String
    - color : String
    - size : String
    - material : String
    - category : String
    - remarks : String
}

class Product {
    - id : String
    - name : String
}

class PurchaseItem {
    - product : Product
    - spec : Spec
    - quantity : int
    - unitPrice : double
}

PurchaseRequest "1" --> "*" PurchaseItem
PurchaseItem --> Product
PurchaseItem --> Spec

' ================= Relationships (Flow) =================

RFQ --> PurchaseRequest : refers to
RFQ --> Enterprise : invites

SubmitQuotation --> RFQ : responds to

ContractReviewRequest --> SubmitQuotation : reviews
ContractReviewRequest --> Contract : creates

PurchaseOrder --> SubmitQuotation : derived from
Contract --> Enterprise : with
Contract --> SubmitQuotation : based on

DeliveryRequest --> Enterprise : via logistics
DeliveryRequest --> Shipment : dispatches

ProcurementClosure --> PurchaseRequest : closes
ProcurementClosure --> DeliveryReceipt : confirms

' ================= Layer 6: Directories =================

Network --> EnterpriseDirectory : contains
Network --> GlobalOrganizationDirectory : contains
Network --> GlobalUserAccountDirectory : contains
Network --> RFQDirectory : contains
Network --> ShipmentDirectory : contains

class EnterpriseDirectory {
    - enterprises : List<Enterprise>
    + addEnterprise(enterprise : Enterprise) : void
    + getEnterpriseById(id : String) : Enterprise
}

class OrganizationDirectory {
    - organizations : List<Organization>
    + addOrganization(org : Organization) : void
    + getOrganizationById(id : String) : Organization
}

class ShipmentDirectory {
    - shipments : List<Shipment>
    + addShipment(shipment : Shipment) : void
    + getShipmentById(id : String) : Shipment
}

class GlobalUserAccountDirectory {
    - userAccounts : List<UserAccount>
    - userRegistry : UserRegistry

    + addUserAccount(user : UserAccount) : void
    + getUserAccountById(id : String) : UserAccount
    + getUserRegistry() : UserRegistry
    + findUserByOrgAndRole(...) : Optional<UserAccount>
}

class GlobalOrganizationDirectory {
    - organizations : List<Organization>
    + addOrganization(org : Organization) : void
    + getOrganizationById(id : String) : Organization
}

class RFQDirectory {
    - rfqList : List<RFQ>
    + addRFQ(rfq : RFQ) : void
    + getRFQById(id : String) : RFQ
}

class PurchaseOrderDirectory {
    - purchaseOrders : List<PurchaseOrder>
    + addPurchaseOrder(po : PurchaseOrder) : void
    + getPurchaseOrderById(id : String) : PurchaseOrder
}

class PurchaseRequestDirectory {
    - purchaseRequests : List<PurchaseRequest>
    + addPurchaseRequest(pr : PurchaseRequest) : void
    + getPurchaseRequestById(id : String) : PurchaseRequest
}

Enterprise --> PurchaseOrderDirectory : contains
Enterprise --> PurchaseRequestDirectory : contains
Enterprise --> OrganizationDirectory : contains

class PurchaseItemDirectory {
    - purchaseItems : List<PurchaseItem>
    + newPurchaseItem(Product product, int quantity,
    double unitPrice, Spec spec) : PurchaseItem
    + findByProductId(id : String) : Optional<PurchaseItem>
}

PurchaseItemDirectory --> PurchaseRequest

' ================= Layer 7: Services =================

class UserRegistry {
    - userIndex : Map<String, UserAccount>
    + register(UserAccount: user) : void
    + unregister(String: userId) : void
}

class OrganizationService {
    - globalOrgDir : GlobalOrganizationDirectory
    + createOrgFromEnterprise(OrganizationType type, Enterprise ent) : Organization
    + deleteOrgFromEnterprise(Organization org, Enterprise ent) : void
}

class UserAccountService {
    - globalDir : GlobalUserAccountDirectory
    + createUserFromOrganization(...) : void
    + deleteUserFromOrganization(UserAccount user, Organization org) : void
}

GlobalUserAccountDirectory --> UserRegistry : contains

Network --> OrganizationService : contains
Network --> UserAccountService : contains

@enduml
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.shipping;

import common.Session;
import enums.RequestStatus;
import enums.ShipmentStatus;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import model.delivery.Shipment;
import model.delivery.ShipmentDirectory;
import model.ecosystem.Enterprise;
import model.ecosystem.Network;
import model.user.UserAccount;
import util.MailUtil;
import util.NavigationUtil;
import util.TimeUtil;
import util.UIUtil;


/**
 *
 * @author linweihong
 */
public class ManageDeliveryReqPanel extends javax.swing.JPanel {

    

    ShipmentDirectory shipmentDirectory;
    private UserAccount currentUser;
    private Network network;
    private Enterprise enterprise;


    
    /**
     * Creates new form ManageUserAccountsJPanel
     */

    public ManageDeliveryReqPanel() {
        initComponents();

        this.currentUser = Session.getCurrentUser();
        this.network = Session.getCurrentNetwork();
        this.enterprise = currentUser.getEnterprise();
        this.shipmentDirectory = network.getShipmentDirectories().getShipmentDirectory(enterprise);
        
        if (shipmentDirectory == null) {
            // if this logistics does not have shipmentDirectory, add a new one for it
            // one logistics will have only one shipment directory
            ShipmentDirectory newShipmentDirectory = new ShipmentDirectory(enterprise); 
            network.getShipmentDirectories().addShipmentDirectory(newShipmentDirectory);
            shipmentDirectory = network.getShipmentDirectories().getShipmentDirectory(enterprise);
        }
        
        
        populateTable();

        // Update the title with the current enterprise name
        UIUtil.setEnterpriseTitle(lbTitle, currentUser.getEnterprise().getName());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTitle = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRequests = new javax.swing.JTable();
        btnTransit = new javax.swing.JButton();

        lbTitle.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        lbTitle.setText("Manage Delivery Requests");

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "TrackingNumber", "PO ID", "Product", "Request Status", "Shipment Status", "Sender", "Receiver", "Ship Date", "Arrival"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRequests);
        if (tblRequests.getColumnModel().getColumnCount() > 0) {
            tblRequests.getColumnModel().getColumn(0).setPreferredWidth(120);
        }

        btnTransit.setText("Accept & Transit");
        btnTransit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(btnBack)
                .addGap(60, 60, 60)
                .addComponent(lbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnTransit, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTitle)
                    .addComponent(btnBack))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(btnTransit)
                .addContainerGap(95, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:


        NavigationUtil.getInstance().goBack();

        

        //        populateTable();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnTransitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransitActionPerformed
        // TODO add your handling code here:
        
        // add ship date and arrival date
        String shipDate = TimeUtil.getCurrentDate(); // e.g., 2025.04.20
        String expectedDeliveredDate = TimeUtil.getExpectedDeliveryDate(5); // e.g., 2025.04.25
        
        
        
        int row = tblRequests.getSelectedRow();
        
        if(row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Shipment shipment = (Shipment)tblRequests.getValueAt(row, 0); // the first element store an object
        shipment.setStatus(ShipmentStatus.IN_TRANSIT);
        shipment.setShipDate(shipDate);
        shipment.setExpectedArrival(expectedDeliveredDate);
        shipment.getDeliveryReq().setStatus(RequestStatus.APPROVED);
        
        
      
        // Send email to show in transit and in a separate thread to avoid freezing UI
        new Thread(() -> {
            try {
                MailUtil.sendLogisticsStatusEmail("alvinusamemory@gmail.com", "neumsis10142008@gmail.com", "Logistics Shipped", "Your delivery is on the way!");
                JOptionPane.showMessageDialog(null, "üìß Email sent successfully!");
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "‚ùå Failed to send email: " + ex.getMessage());
            }
        }).start();
        
        
        
        populateTable();
        
    }//GEN-LAST:event_btnTransitActionPerformed

    
    // clean all data and add all data in vitalSignsHistory
    private void populateTable() {
        
        DefaultTableModel model = (DefaultTableModel) tblRequests.getModel(); // get table schema to control the table
        model.setRowCount(0); // clean all data in the table
        
//        System.out.println("shipmentDirectory" + shipmentDirectory.getShipments().get(0).getTrackingNumber());

        
        
        for (Shipment shipment: shipmentDirectory.getShipments()){

            
            Object[] row = new Object[9];
            row[0] = shipment;
            row[1] = shipment.getPurchaseOrderID();
            row[2] = shipment.getItems().get(0).getProduct();
            row[3] = shipment.getDeliveryReq().getStatus();
            row[4] = shipment.getStatus();
            row[5] = shipment.getSender();
            row[6] = shipment.getReceiver();
            row[7] = shipment.getShipDate();
            row[8] = shipment.getExpectedArrival();
            
            
            
            model.addRow(row);
            
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnTransit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JTable tblRequests;
    // End of variables declaration//GEN-END:variables
}
